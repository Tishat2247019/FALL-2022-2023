#include <iostream>
using namespace std;
#define SIZE 5

int items[SIZE];
int front = -1, rear =-1;

int isFull()
{
    if( (front == rear + 1) || (front == 0 && rear == SIZE-1)) return 1;
    return 0;
}

int isEmpty()
{
    if(front == -1) return 1;
    return 0;
}

void enQueue(int element)
{
    if(isFull())
        cout<<"Queue is full"<<endl;
    else
    {
        if(front == -1) front = 0;
        rear = (rear + 1) % SIZE;
        items[rear] = element;
        cout<<"enqueued"<<element<<endl;
    }
}


int deQueue()
{
    int element;
    if(isEmpty()) {
       cout<<"Queue is full"<<endl;;
        return(-1);
    } else {
        element = items[front];
        if (front == rear){
            front = -1;
            rear = -1;
        } /* Q has only one element, so we reset the queue after dequeing it. ? */
        else {
            front = (front + 1) % SIZE;

        }
        cout<<"Deleted element" <<element<<endl;
        return(element);
    }
}




void display()
{
    int i;
    if(isEmpty())
       cout<<"Queue is full"<<endl;

    else
    {
        cout<<" Front "<<front<<endl;
        cout<<"Items ";
        for( i = front; i!=rear; i=(i+1)%SIZE) {
            cout<<" "<<items[i];
        }
       cout<<" "<<items[i]<<endl;
        cout<<" Rear"<<rear<<endl;
    }
}

int main()
{

    deQueue();

    enQueue(1);
    enQueue(2);
    enQueue(3);
    enQueue(4);
    enQueue(5);


    enQueue(6);

    display();
    deQueue();

    display();

    enQueue(7);
    display();


    enQueue(8);

    return 0;
}
